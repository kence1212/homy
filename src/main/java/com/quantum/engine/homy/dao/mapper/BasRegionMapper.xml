<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.quantum.engine.homy.dao.BasRegionMapper">
<cache type="org.mybatis.caches.ehcache.EhcacheCache" />
  <resultMap id="BaseResultMap" type="com.quantum.engine.homy.model.BasRegion">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="pid" jdbcType="INTEGER" property="pid" />
    <result column="grade" jdbcType="SMALLINT" property="grade" />
    <result column="is_hot" jdbcType="SMALLINT" property="isHot" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="BaseResultWithParentRegMap" type="com.quantum.engine.homy.model.ext.BasRegionExt">
  		<association property="parentRegion" column="pid" select="selectByPrimaryKey"></association>
  </resultMap>
  <sql id="Base_Column_List">
    id, name, code, pid, grade, is_hot
  </sql>
  
  <select id="getCityByName" parameterType="java.lang.String" resultType="java.util.Map">
    select 
    id,name	
    from bas_region
    where name = #{cityName} and grade = 3
  </select>
  
  <select id="getByCityNameAndGrade" resultMap="BaseResultMap">
  	select 
  	<include refid="Base_Column_List" />
  	from bas_region
    where name = #{cityName} and grade = #{grade}
  </select>
  
   <select id="getNameById" parameterType="java.lang.Integer" resultType="java.lang.String">
    select 
    name
    from bas_region
    where id = #{id,jdbcType=INTEGER} 
  </select>
  
  <select id="getHotCitylist" resultMap="BaseResultWithParentRegMap">
		select 
		<include refid="Base_Column_List" />
		from bas_region
		where is_hot = 1 and grade = 3
	</select>
	
  <select id="getHotRegion" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from bas_region
		where is_hot = 1 and grade = 3
	</select>
	
	<select id="getCount" parameterType="java.lang.String" resultType="java.lang.Integer">
		select
		count(*)
		from bas_region
		<where>
				 and grade = 3
			<if test="keyword!=null and keyword !=''">  
                 AND name like #{keyword}  
            </if> 
			
		</where>
		
	</select>
	
	
	<select id="getRegion" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from bas_region
		<if test="pid != 0">
			where pid = #{pid,jdbcType=INTEGER}
		</if>
		<if test="pid == 0">
			where pid is null
		</if>
	</select>
	
	<select id="getCityByProvince" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from bas_region where grade = 3 and pid = #{id}
	</select>
	<select id="getAllCity" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from bas_region where grade = 3
	</select>
	
	<select id="getPageList" resultMap="BaseResultWithParentRegMap">
		select 
		<include refid="Base_Column_List" />
		from bas_region
		<where>
				 and grade = 3
			<if test="keyword!=null and keyword !=''">  
                 AND name like #{keyword}  
            </if> 
			
		</where>
		<if test="page>0">
			limit #{startIndex},#{pageSize}
		</if>
	</select>
	
	<select id="getAll" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from bas_region
	</select>
  
  <select id="getParentRegionById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bas_region
    where id=  (select pid from bas_region where id = #{id,jdbcType=INTEGER})
  </select>
  

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bas_region
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from bas_region
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.quantum.engine.homy.model.BasRegion">
    insert into bas_region (id, name, code, 
      pid, grade, is_hot
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR}, 
      #{pid,jdbcType=INTEGER}, #{grade,jdbcType=SMALLINT}, #{isHot,jdbcType=SMALLINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.quantum.engine.homy.model.BasRegion">
    insert into bas_region
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="code != null">
        code,
      </if>
      <if test="pid != null">
        pid,
      </if>
      <if test="grade != null">
        grade,
      </if>
      <if test="isHot != null">
        is_hot,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="code != null">
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="pid != null">
        #{pid,jdbcType=INTEGER},
      </if>
      <if test="grade != null">
        #{grade,jdbcType=SMALLINT},
      </if>
      <if test="isHot != null">
        #{isHot,jdbcType=SMALLINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.quantum.engine.homy.model.BasRegion">
    update bas_region
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="code != null">
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="pid != null">
        pid = #{pid,jdbcType=INTEGER},
      </if>
      <if test="grade != null">
        grade = #{grade,jdbcType=SMALLINT},
      </if>
      <if test="isHot != null">
        is_hot = #{isHot,jdbcType=SMALLINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.quantum.engine.homy.model.BasRegion">
    update bas_region
    set name = #{name,jdbcType=VARCHAR},
      code = #{code,jdbcType=VARCHAR},
      pid = #{pid,jdbcType=INTEGER},
      grade = #{grade,jdbcType=SMALLINT},
      is_hot = #{isHot,jdbcType=SMALLINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="setHotCityById" parameterType="java.lang.Integer" >
    update bas_region
    set 
     is_hot = 1
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="removeHotCityById" parameterType="java.lang.Integer" >
    update bas_region
    set 
     is_hot = 0
    where id = #{id,jdbcType=INTEGER}
  </update>

</mapper>