<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.quantum.engine.homy.dao.BizOrderPayInfoMapper">
  <resultMap id="BaseResultMap" type="com.quantum.engine.homy.model.BizOrderPayInfo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="order_ids" jdbcType="VARCHAR" property="orderIds" />
    <result column="out_trade_no" jdbcType="VARCHAR" property="outTradeNo" />
    <result column="trade_no" jdbcType="VARCHAR" property="tradeNo" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="payed_time" jdbcType="TIMESTAMP" property="payedTime" />
    <result column="total_amount" jdbcType="DOUBLE" property="totalAmount" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="pay_app_user_id" jdbcType="VARCHAR" property="payAppUserId" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="pay_type" jdbcType="INTEGER" property="payType" />
  </resultMap>
  <sql id="Base_Column_List">
    id, order_ids, out_trade_no, trade_no, create_time, payed_time, total_amount, user_id, 
    pay_app_user_id, state, pay_type
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from biz_order_pay_info
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  <select id="listAutoQuery" resultMap="BaseResultMap">
  	select 
    <include refid="Base_Column_List" />
    from biz_order_pay_info
    where state = #{state} and create_time >= #{preDate}
  </select>
  
  <select id="getByOutTradeNo" parameterType="string" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from biz_order_pay_info
    where out_trade_no = #{value}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from biz_order_pay_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.quantum.engine.homy.model.BizOrderPayInfo">
    insert into biz_order_pay_info (id, order_ids, out_trade_no, 
      trade_no, create_time, payed_time, 
      total_amount, user_id, pay_app_user_id, 
      state, pay_type)
    values (#{id,jdbcType=INTEGER}, #{orderIds,jdbcType=VARCHAR}, #{outTradeNo,jdbcType=VARCHAR}, 
      #{tradeNo,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{payedTime,jdbcType=TIMESTAMP}, 
      #{totalAmount,jdbcType=DOUBLE}, #{userId,jdbcType=INTEGER}, #{payAppUserId,jdbcType=VARCHAR}, 
      #{state,jdbcType=INTEGER}, #{payType,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.quantum.engine.homy.model.BizOrderPayInfo">
    insert into biz_order_pay_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="orderIds != null">
        order_ids,
      </if>
      <if test="outTradeNo != null">
        out_trade_no,
      </if>
      <if test="tradeNo != null">
        trade_no,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="payedTime != null">
        payed_time,
      </if>
      <if test="totalAmount != null">
        total_amount,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="payAppUserId != null">
        pay_app_user_id,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="payType != null">
        pay_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderIds != null">
        #{orderIds,jdbcType=VARCHAR},
      </if>
      <if test="outTradeNo != null">
        #{outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="tradeNo != null">
        #{tradeNo,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payedTime != null">
        #{payedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="totalAmount != null">
        #{totalAmount,jdbcType=DOUBLE},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="payAppUserId != null">
        #{payAppUserId,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="payType != null">
        #{payType,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.quantum.engine.homy.model.BizOrderPayInfo">
    update biz_order_pay_info
    <set>
      <if test="orderIds != null">
        order_ids = #{orderIds,jdbcType=VARCHAR},
      </if>
      <if test="outTradeNo != null">
        out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="tradeNo != null">
        trade_no = #{tradeNo,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payedTime != null">
        payed_time = #{payedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="totalAmount != null">
        total_amount = #{totalAmount,jdbcType=DOUBLE},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="payAppUserId != null">
        pay_app_user_id = #{payAppUserId,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="payType != null">
        pay_type = #{payType,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.quantum.engine.homy.model.BizOrderPayInfo">
    update biz_order_pay_info
    set order_ids = #{orderIds,jdbcType=VARCHAR},
      out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
      trade_no = #{tradeNo,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      payed_time = #{payedTime,jdbcType=TIMESTAMP},
      total_amount = #{totalAmount,jdbcType=DOUBLE},
      user_id = #{userId,jdbcType=INTEGER},
      pay_app_user_id = #{payAppUserId,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      pay_type = #{payType,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>