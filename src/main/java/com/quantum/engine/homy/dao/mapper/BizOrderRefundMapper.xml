<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.quantum.engine.homy.dao.BizOrderRefundMapper">
  <resultMap id="BaseResultMap" type="com.quantum.engine.homy.model.BizOrderRefund">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="out_refund_no" jdbcType="VARCHAR" property="outRefundNo" />
    <result column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="refund_amount" jdbcType="DOUBLE" property="refundAmount" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_id" jdbcType="INTEGER" property="createId" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="refund_reason" jdbcType="VARCHAR" property="refundReason" />
    <result column="goods_state" jdbcType="VARCHAR" property="goodsState" />
    <result column="out_trade_total_fee" jdbcType="DOUBLE" property="outTradeTotalFee" />
    <result column="reject_reason" jdbcType="VARCHAR" property="rejectReason" />
    <result column="reject_user_id" jdbcType="INTEGER" property="rejectUserId" />
    <result column="reject_time" jdbcType="TIMESTAMP" property="rejectTime" />
    <result column="is_valid" jdbcType="INTEGER" property="isValid" />
  </resultMap>
  <sql id="Base_Column_List">
    id, out_refund_no, order_id, refund_amount, create_time, create_id, state, remark, 
    out_trade_total_fee , refund_reason , goods_state , reject_reason , reject_user_id,
    reject_time , is_valid
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from biz_order_refund
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="count" parameterType="java.util.Map" resultType="int">
  	select count(1) from biz_order_refund
  	where 1=1 
  </select>
  <select id="getByOrderId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
  	select 
    <include refid="Base_Column_List" />
    from biz_order_refund
    where order_id = #{value} and is_valid = 1
  </select>
  
  <select id="list" parameterType="java.util.Map" resultMap="BaseResultMap">
  	select 
    <include refid="Base_Column_List" />
    , (select order_no from biz_order bod where bod.id = ord.order_id ) as orderNo
    from biz_order_refund ord
    where 1 = 1
    <if test="page != null and page != '' and size != null and size != ''">
    	limit page,size
    </if>
  </select>
  
  <delete id="deleteLogicByPrimaryKey" parameterType="java.lang.Integer">
    update biz_order_refund
    set is_valid = 0
    where id = #{id,jdbcType=INTEGER}
  </delete>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from biz_order_refund
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.quantum.engine.homy.model.BizOrderRefund">
    insert into biz_order_refund (id, out_refund_no, order_id, 
      refund_amount, create_time, create_id, 
      state, remark, out_trade_total_fee , refund_reason , goods_state , is_valid
      )
    values (#{id,jdbcType=INTEGER}, #{outRefundNo,jdbcType=VARCHAR}, #{orderId,jdbcType=INTEGER}, 
      #{refundAmount,jdbcType=DOUBLE}, #{createTime,jdbcType=TIMESTAMP}, #{createId,jdbcType=INTEGER}, 
      #{state,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, #{outTradeTotalFee,jdbcType=DOUBLE},
       #{refundReason,jdbcType=VARCHAR}, #{goodsState,jdbcType=VARCHAR}, #{isValid,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.quantum.engine.homy.model.BizOrderRefund">
    insert into biz_order_refund
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="outRefundNo != null">
        out_refund_no,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="refundAmount != null">
        refund_amount,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createId != null">
        create_id,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="outTradeTotalFee != null">
        out_trade_total_fee,
      </if>
      <if test="refundReason != null">
        refund_reason,
      </if>
      <if test="goodsState != null">
        goods_state,
      </if>
      <if test="isValid != null">
        is_valid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="outRefundNo != null">
        #{outRefundNo,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="refundAmount != null">
        #{refundAmount,jdbcType=DOUBLE},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createId != null">
        #{createId,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="outTradeTotalFee != null">
        #{outTradeTotalFee,jdbcType=DOUBLE},
      </if>
      <if test="refundReason != null">
         #{refundReason,jdbcType=VARCHAR},
      </if>
      <if test="goodsState != null">
        #{goodsState,jdbcType=VARCHAR},
      </if>
      <if test="isValid != null">
        #{isValid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="reject" parameterType="com.quantum.engine.homy.model.BizOrderRefund">
  	update biz_order_refund
  	<set>
      <if test="rejectReason != null">
        reject_reason = #{rejectReason,jdbcType=VARCHAR},
      </if>
      <if test="rejectUserId != null">
        reject_user_id = #{rejectUserId,jdbcType=INTEGER},
      </if>
      <if test="rejectTime != null">
        reject_time = #{rejectTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.quantum.engine.homy.model.BizOrderRefund">
    update biz_order_refund
    <set>
      <if test="outRefundNo != null">
        out_refund_no = #{outRefundNo,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="refundAmount != null">
        refund_amount = #{refundAmount,jdbcType=DOUBLE},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createId != null">
        create_id = #{createId,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="outTradeTotalFee != null">
        out_trade_total_fee = #{outTradeTotalFee,jdbcType=DOUBLE},
      </if>
      <if test="refundReason != null">
         refund_reason = #{refundReason,jdbcType=VARCHAR},
      </if>
      <if test="goodsState != null">
        goods_state = #{goodsState,jdbcType=VARCHAR},
      </if>
      <if test="isValid != null">
        is_valid = #{isValid,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.quantum.engine.homy.model.BizOrderRefund">
    update biz_order_refund
    set out_refund_no = #{outRefundNo,jdbcType=VARCHAR},
      order_id = #{orderId,jdbcType=INTEGER},
      refund_amount = #{refundAmount,jdbcType=DOUBLE},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_id = #{createId,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      refund_reason = #{refundReason,jdbcType=VARCHAR},
      goods_state = #{goodsState,jdbcType=VARCHAR},
      reject_reason = #{rejectReason,jdbcType=VARCHAR},
      reject_user_id = #{rejectUserId,jdbcType=INTEGER},
      reject_time = #{rejectTime,jdbcType=TIMESTAMP},
      out_trade_total_fee = #{outTradeTotalFee,jdbcType=DOUBLE}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>